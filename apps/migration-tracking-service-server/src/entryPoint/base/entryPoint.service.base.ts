/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  EntryPoint as PrismaEntryPoint,
  Country as PrismaCountry,
} from "@prisma/client";

export class EntryPointServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EntryPointCountArgs, "select">
  ): Promise<number> {
    return this.prisma.entryPoint.count(args);
  }

  async entryPoints(
    args: Prisma.EntryPointFindManyArgs
  ): Promise<PrismaEntryPoint[]> {
    return this.prisma.entryPoint.findMany(args);
  }
  async entryPoint(
    args: Prisma.EntryPointFindUniqueArgs
  ): Promise<PrismaEntryPoint | null> {
    return this.prisma.entryPoint.findUnique(args);
  }
  async createEntryPoint(
    args: Prisma.EntryPointCreateArgs
  ): Promise<PrismaEntryPoint> {
    return this.prisma.entryPoint.create(args);
  }
  async updateEntryPoint(
    args: Prisma.EntryPointUpdateArgs
  ): Promise<PrismaEntryPoint> {
    return this.prisma.entryPoint.update(args);
  }
  async deleteEntryPoint(
    args: Prisma.EntryPointDeleteArgs
  ): Promise<PrismaEntryPoint> {
    return this.prisma.entryPoint.delete(args);
  }

  async getCountry(parentId: string): Promise<PrismaCountry | null> {
    return this.prisma.entryPoint
      .findUnique({
        where: { id: parentId },
      })
      .country();
  }
}
