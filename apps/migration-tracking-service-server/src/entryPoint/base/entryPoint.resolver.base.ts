/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EntryPoint } from "./EntryPoint";
import { EntryPointCountArgs } from "./EntryPointCountArgs";
import { EntryPointFindManyArgs } from "./EntryPointFindManyArgs";
import { EntryPointFindUniqueArgs } from "./EntryPointFindUniqueArgs";
import { CreateEntryPointArgs } from "./CreateEntryPointArgs";
import { UpdateEntryPointArgs } from "./UpdateEntryPointArgs";
import { DeleteEntryPointArgs } from "./DeleteEntryPointArgs";
import { Country } from "../../country/base/Country";
import { EntryPointService } from "../entryPoint.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EntryPoint)
export class EntryPointResolverBase {
  constructor(
    protected readonly service: EntryPointService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EntryPoint",
    action: "read",
    possession: "any",
  })
  async _entryPointsMeta(
    @graphql.Args() args: EntryPointCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EntryPoint])
  @nestAccessControl.UseRoles({
    resource: "EntryPoint",
    action: "read",
    possession: "any",
  })
  async entryPoints(
    @graphql.Args() args: EntryPointFindManyArgs
  ): Promise<EntryPoint[]> {
    return this.service.entryPoints(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EntryPoint, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EntryPoint",
    action: "read",
    possession: "own",
  })
  async entryPoint(
    @graphql.Args() args: EntryPointFindUniqueArgs
  ): Promise<EntryPoint | null> {
    const result = await this.service.entryPoint(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EntryPoint)
  @nestAccessControl.UseRoles({
    resource: "EntryPoint",
    action: "create",
    possession: "any",
  })
  async createEntryPoint(
    @graphql.Args() args: CreateEntryPointArgs
  ): Promise<EntryPoint> {
    return await this.service.createEntryPoint({
      ...args,
      data: {
        ...args.data,

        country: args.data.country
          ? {
              connect: args.data.country,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EntryPoint)
  @nestAccessControl.UseRoles({
    resource: "EntryPoint",
    action: "update",
    possession: "any",
  })
  async updateEntryPoint(
    @graphql.Args() args: UpdateEntryPointArgs
  ): Promise<EntryPoint | null> {
    try {
      return await this.service.updateEntryPoint({
        ...args,
        data: {
          ...args.data,

          country: args.data.country
            ? {
                connect: args.data.country,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EntryPoint)
  @nestAccessControl.UseRoles({
    resource: "EntryPoint",
    action: "delete",
    possession: "any",
  })
  async deleteEntryPoint(
    @graphql.Args() args: DeleteEntryPointArgs
  ): Promise<EntryPoint | null> {
    try {
      return await this.service.deleteEntryPoint(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Country, {
    nullable: true,
    name: "country",
  })
  @nestAccessControl.UseRoles({
    resource: "Country",
    action: "read",
    possession: "any",
  })
  async getCountry(
    @graphql.Parent() parent: EntryPoint
  ): Promise<Country | null> {
    const result = await this.service.getCountry(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
