/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Migrants } from "./Migrants";
import { MigrantsCountArgs } from "./MigrantsCountArgs";
import { MigrantsFindManyArgs } from "./MigrantsFindManyArgs";
import { MigrantsFindUniqueArgs } from "./MigrantsFindUniqueArgs";
import { CreateMigrantsArgs } from "./CreateMigrantsArgs";
import { UpdateMigrantsArgs } from "./UpdateMigrantsArgs";
import { DeleteMigrantsArgs } from "./DeleteMigrantsArgs";
import { DocumentsFindManyArgs } from "../../documents/base/DocumentsFindManyArgs";
import { Documents } from "../../documents/base/Documents";
import { MigrationFlow } from "../../migrationFlow/base/MigrationFlow";
import { MigrantsService } from "../migrants.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Migrants)
export class MigrantsResolverBase {
  constructor(
    protected readonly service: MigrantsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Migrants",
    action: "read",
    possession: "any",
  })
  async _migrantsItemsMeta(
    @graphql.Args() args: MigrantsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Migrants])
  @nestAccessControl.UseRoles({
    resource: "Migrants",
    action: "read",
    possession: "any",
  })
  async migrantsItems(
    @graphql.Args() args: MigrantsFindManyArgs
  ): Promise<Migrants[]> {
    return this.service.migrantsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Migrants, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Migrants",
    action: "read",
    possession: "own",
  })
  async migrants(
    @graphql.Args() args: MigrantsFindUniqueArgs
  ): Promise<Migrants | null> {
    const result = await this.service.migrants(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Migrants)
  @nestAccessControl.UseRoles({
    resource: "Migrants",
    action: "create",
    possession: "any",
  })
  async createMigrants(
    @graphql.Args() args: CreateMigrantsArgs
  ): Promise<Migrants> {
    return await this.service.createMigrants({
      ...args,
      data: {
        ...args.data,

        migrationFlow: args.data.migrationFlow
          ? {
              connect: args.data.migrationFlow,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Migrants)
  @nestAccessControl.UseRoles({
    resource: "Migrants",
    action: "update",
    possession: "any",
  })
  async updateMigrants(
    @graphql.Args() args: UpdateMigrantsArgs
  ): Promise<Migrants | null> {
    try {
      return await this.service.updateMigrants({
        ...args,
        data: {
          ...args.data,

          migrationFlow: args.data.migrationFlow
            ? {
                connect: args.data.migrationFlow,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Migrants)
  @nestAccessControl.UseRoles({
    resource: "Migrants",
    action: "delete",
    possession: "any",
  })
  async deleteMigrants(
    @graphql.Args() args: DeleteMigrantsArgs
  ): Promise<Migrants | null> {
    try {
      return await this.service.deleteMigrants(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Documents], { name: "documentsItems" })
  @nestAccessControl.UseRoles({
    resource: "Documents",
    action: "read",
    possession: "any",
  })
  async findDocumentsItems(
    @graphql.Parent() parent: Migrants,
    @graphql.Args() args: DocumentsFindManyArgs
  ): Promise<Documents[]> {
    const results = await this.service.findDocumentsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => MigrationFlow, {
    nullable: true,
    name: "migrationFlow",
  })
  @nestAccessControl.UseRoles({
    resource: "MigrationFlow",
    action: "read",
    possession: "any",
  })
  async getMigrationFlow(
    @graphql.Parent() parent: Migrants
  ): Promise<MigrationFlow | null> {
    const result = await this.service.getMigrationFlow(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
