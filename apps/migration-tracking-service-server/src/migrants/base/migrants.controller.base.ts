/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MigrantsService } from "../migrants.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MigrantsCreateInput } from "./MigrantsCreateInput";
import { Migrants } from "./Migrants";
import { MigrantsFindManyArgs } from "./MigrantsFindManyArgs";
import { MigrantsWhereUniqueInput } from "./MigrantsWhereUniqueInput";
import { MigrantsUpdateInput } from "./MigrantsUpdateInput";
import { DocumentsFindManyArgs } from "../../documents/base/DocumentsFindManyArgs";
import { Documents } from "../../documents/base/Documents";
import { DocumentsWhereUniqueInput } from "../../documents/base/DocumentsWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MigrantsControllerBase {
  constructor(
    protected readonly service: MigrantsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Migrants })
  @nestAccessControl.UseRoles({
    resource: "Migrants",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createMigrants(
    @common.Body() data: MigrantsCreateInput
  ): Promise<Migrants> {
    return await this.service.createMigrants({
      data: {
        ...data,

        migrationFlow: data.migrationFlow
          ? {
              connect: data.migrationFlow,
            }
          : undefined,
      },
      select: {
        age: true,
        createdAt: true,
        firstName: true,
        gender: true,
        id: true,
        lastName: true,

        migrationFlow: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Migrants] })
  @ApiNestedQuery(MigrantsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Migrants",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async migrantsItems(@common.Req() request: Request): Promise<Migrants[]> {
    const args = plainToClass(MigrantsFindManyArgs, request.query);
    return this.service.migrantsItems({
      ...args,
      select: {
        age: true,
        createdAt: true,
        firstName: true,
        gender: true,
        id: true,
        lastName: true,

        migrationFlow: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Migrants })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Migrants",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async migrants(
    @common.Param() params: MigrantsWhereUniqueInput
  ): Promise<Migrants | null> {
    const result = await this.service.migrants({
      where: params,
      select: {
        age: true,
        createdAt: true,
        firstName: true,
        gender: true,
        id: true,
        lastName: true,

        migrationFlow: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Migrants })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Migrants",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateMigrants(
    @common.Param() params: MigrantsWhereUniqueInput,
    @common.Body() data: MigrantsUpdateInput
  ): Promise<Migrants | null> {
    try {
      return await this.service.updateMigrants({
        where: params,
        data: {
          ...data,

          migrationFlow: data.migrationFlow
            ? {
                connect: data.migrationFlow,
              }
            : undefined,
        },
        select: {
          age: true,
          createdAt: true,
          firstName: true,
          gender: true,
          id: true,
          lastName: true,

          migrationFlow: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Migrants })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Migrants",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMigrants(
    @common.Param() params: MigrantsWhereUniqueInput
  ): Promise<Migrants | null> {
    try {
      return await this.service.deleteMigrants({
        where: params,
        select: {
          age: true,
          createdAt: true,
          firstName: true,
          gender: true,
          id: true,
          lastName: true,

          migrationFlow: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/documentsItems")
  @ApiNestedQuery(DocumentsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Documents",
    action: "read",
    possession: "any",
  })
  async findDocumentsItems(
    @common.Req() request: Request,
    @common.Param() params: MigrantsWhereUniqueInput
  ): Promise<Documents[]> {
    const query = plainToClass(DocumentsFindManyArgs, request.query);
    const results = await this.service.findDocumentsItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,

        migrant: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/documentsItems")
  @nestAccessControl.UseRoles({
    resource: "Migrants",
    action: "update",
    possession: "any",
  })
  async connectDocumentsItems(
    @common.Param() params: MigrantsWhereUniqueInput,
    @common.Body() body: DocumentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      documentsItems: {
        connect: body,
      },
    };
    await this.service.updateMigrants({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/documentsItems")
  @nestAccessControl.UseRoles({
    resource: "Migrants",
    action: "update",
    possession: "any",
  })
  async updateDocumentsItems(
    @common.Param() params: MigrantsWhereUniqueInput,
    @common.Body() body: DocumentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      documentsItems: {
        set: body,
      },
    };
    await this.service.updateMigrants({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/documentsItems")
  @nestAccessControl.UseRoles({
    resource: "Migrants",
    action: "update",
    possession: "any",
  })
  async disconnectDocumentsItems(
    @common.Param() params: MigrantsWhereUniqueInput,
    @common.Body() body: DocumentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      documentsItems: {
        disconnect: body,
      },
    };
    await this.service.updateMigrants({
      where: params,
      data,
      select: { id: true },
    });
  }
}
