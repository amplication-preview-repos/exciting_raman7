/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Migrants as PrismaMigrants,
  Documents as PrismaDocuments,
  MigrationFlow as PrismaMigrationFlow,
} from "@prisma/client";

export class MigrantsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MigrantsCountArgs, "select">): Promise<number> {
    return this.prisma.migrants.count(args);
  }

  async migrantsItems(
    args: Prisma.MigrantsFindManyArgs
  ): Promise<PrismaMigrants[]> {
    return this.prisma.migrants.findMany(args);
  }
  async migrants(
    args: Prisma.MigrantsFindUniqueArgs
  ): Promise<PrismaMigrants | null> {
    return this.prisma.migrants.findUnique(args);
  }
  async createMigrants(
    args: Prisma.MigrantsCreateArgs
  ): Promise<PrismaMigrants> {
    return this.prisma.migrants.create(args);
  }
  async updateMigrants(
    args: Prisma.MigrantsUpdateArgs
  ): Promise<PrismaMigrants> {
    return this.prisma.migrants.update(args);
  }
  async deleteMigrants(
    args: Prisma.MigrantsDeleteArgs
  ): Promise<PrismaMigrants> {
    return this.prisma.migrants.delete(args);
  }

  async findDocumentsItems(
    parentId: string,
    args: Prisma.DocumentsFindManyArgs
  ): Promise<PrismaDocuments[]> {
    return this.prisma.migrants
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .documentsItems(args);
  }

  async getMigrationFlow(
    parentId: string
  ): Promise<PrismaMigrationFlow | null> {
    return this.prisma.migrants
      .findUnique({
        where: { id: parentId },
      })
      .migrationFlow();
  }
}
