/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DeparturePoint } from "./DeparturePoint";
import { DeparturePointCountArgs } from "./DeparturePointCountArgs";
import { DeparturePointFindManyArgs } from "./DeparturePointFindManyArgs";
import { DeparturePointFindUniqueArgs } from "./DeparturePointFindUniqueArgs";
import { CreateDeparturePointArgs } from "./CreateDeparturePointArgs";
import { UpdateDeparturePointArgs } from "./UpdateDeparturePointArgs";
import { DeleteDeparturePointArgs } from "./DeleteDeparturePointArgs";
import { Country } from "../../country/base/Country";
import { DeparturePointService } from "../departurePoint.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DeparturePoint)
export class DeparturePointResolverBase {
  constructor(
    protected readonly service: DeparturePointService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DeparturePoint",
    action: "read",
    possession: "any",
  })
  async _departurePointsMeta(
    @graphql.Args() args: DeparturePointCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DeparturePoint])
  @nestAccessControl.UseRoles({
    resource: "DeparturePoint",
    action: "read",
    possession: "any",
  })
  async departurePoints(
    @graphql.Args() args: DeparturePointFindManyArgs
  ): Promise<DeparturePoint[]> {
    return this.service.departurePoints(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DeparturePoint, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DeparturePoint",
    action: "read",
    possession: "own",
  })
  async departurePoint(
    @graphql.Args() args: DeparturePointFindUniqueArgs
  ): Promise<DeparturePoint | null> {
    const result = await this.service.departurePoint(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DeparturePoint)
  @nestAccessControl.UseRoles({
    resource: "DeparturePoint",
    action: "create",
    possession: "any",
  })
  async createDeparturePoint(
    @graphql.Args() args: CreateDeparturePointArgs
  ): Promise<DeparturePoint> {
    return await this.service.createDeparturePoint({
      ...args,
      data: {
        ...args.data,

        country: args.data.country
          ? {
              connect: args.data.country,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DeparturePoint)
  @nestAccessControl.UseRoles({
    resource: "DeparturePoint",
    action: "update",
    possession: "any",
  })
  async updateDeparturePoint(
    @graphql.Args() args: UpdateDeparturePointArgs
  ): Promise<DeparturePoint | null> {
    try {
      return await this.service.updateDeparturePoint({
        ...args,
        data: {
          ...args.data,

          country: args.data.country
            ? {
                connect: args.data.country,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DeparturePoint)
  @nestAccessControl.UseRoles({
    resource: "DeparturePoint",
    action: "delete",
    possession: "any",
  })
  async deleteDeparturePoint(
    @graphql.Args() args: DeleteDeparturePointArgs
  ): Promise<DeparturePoint | null> {
    try {
      return await this.service.deleteDeparturePoint(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Country, {
    nullable: true,
    name: "country",
  })
  @nestAccessControl.UseRoles({
    resource: "Country",
    action: "read",
    possession: "any",
  })
  async getCountry(
    @graphql.Parent() parent: DeparturePoint
  ): Promise<Country | null> {
    const result = await this.service.getCountry(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
