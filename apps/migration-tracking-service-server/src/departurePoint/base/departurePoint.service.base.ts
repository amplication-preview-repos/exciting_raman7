/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DeparturePoint as PrismaDeparturePoint,
  Country as PrismaCountry,
} from "@prisma/client";

export class DeparturePointServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DeparturePointCountArgs, "select">
  ): Promise<number> {
    return this.prisma.departurePoint.count(args);
  }

  async departurePoints(
    args: Prisma.DeparturePointFindManyArgs
  ): Promise<PrismaDeparturePoint[]> {
    return this.prisma.departurePoint.findMany(args);
  }
  async departurePoint(
    args: Prisma.DeparturePointFindUniqueArgs
  ): Promise<PrismaDeparturePoint | null> {
    return this.prisma.departurePoint.findUnique(args);
  }
  async createDeparturePoint(
    args: Prisma.DeparturePointCreateArgs
  ): Promise<PrismaDeparturePoint> {
    return this.prisma.departurePoint.create(args);
  }
  async updateDeparturePoint(
    args: Prisma.DeparturePointUpdateArgs
  ): Promise<PrismaDeparturePoint> {
    return this.prisma.departurePoint.update(args);
  }
  async deleteDeparturePoint(
    args: Prisma.DeparturePointDeleteArgs
  ): Promise<PrismaDeparturePoint> {
    return this.prisma.departurePoint.delete(args);
  }

  async getCountry(parentId: string): Promise<PrismaCountry | null> {
    return this.prisma.departurePoint
      .findUnique({
        where: { id: parentId },
      })
      .country();
  }
}
