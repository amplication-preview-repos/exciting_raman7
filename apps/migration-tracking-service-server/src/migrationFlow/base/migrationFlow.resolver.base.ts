/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MigrationFlow } from "./MigrationFlow";
import { MigrationFlowCountArgs } from "./MigrationFlowCountArgs";
import { MigrationFlowFindManyArgs } from "./MigrationFlowFindManyArgs";
import { MigrationFlowFindUniqueArgs } from "./MigrationFlowFindUniqueArgs";
import { CreateMigrationFlowArgs } from "./CreateMigrationFlowArgs";
import { UpdateMigrationFlowArgs } from "./UpdateMigrationFlowArgs";
import { DeleteMigrationFlowArgs } from "./DeleteMigrationFlowArgs";
import { MigrantsFindManyArgs } from "../../migrants/base/MigrantsFindManyArgs";
import { Migrants } from "../../migrants/base/Migrants";
import { MigrationFlowService } from "../migrationFlow.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MigrationFlow)
export class MigrationFlowResolverBase {
  constructor(
    protected readonly service: MigrationFlowService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MigrationFlow",
    action: "read",
    possession: "any",
  })
  async _migrationFlowsMeta(
    @graphql.Args() args: MigrationFlowCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MigrationFlow])
  @nestAccessControl.UseRoles({
    resource: "MigrationFlow",
    action: "read",
    possession: "any",
  })
  async migrationFlows(
    @graphql.Args() args: MigrationFlowFindManyArgs
  ): Promise<MigrationFlow[]> {
    return this.service.migrationFlows(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MigrationFlow, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MigrationFlow",
    action: "read",
    possession: "own",
  })
  async migrationFlow(
    @graphql.Args() args: MigrationFlowFindUniqueArgs
  ): Promise<MigrationFlow | null> {
    const result = await this.service.migrationFlow(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MigrationFlow)
  @nestAccessControl.UseRoles({
    resource: "MigrationFlow",
    action: "create",
    possession: "any",
  })
  async createMigrationFlow(
    @graphql.Args() args: CreateMigrationFlowArgs
  ): Promise<MigrationFlow> {
    return await this.service.createMigrationFlow({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MigrationFlow)
  @nestAccessControl.UseRoles({
    resource: "MigrationFlow",
    action: "update",
    possession: "any",
  })
  async updateMigrationFlow(
    @graphql.Args() args: UpdateMigrationFlowArgs
  ): Promise<MigrationFlow | null> {
    try {
      return await this.service.updateMigrationFlow({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MigrationFlow)
  @nestAccessControl.UseRoles({
    resource: "MigrationFlow",
    action: "delete",
    possession: "any",
  })
  async deleteMigrationFlow(
    @graphql.Args() args: DeleteMigrationFlowArgs
  ): Promise<MigrationFlow | null> {
    try {
      return await this.service.deleteMigrationFlow(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Migrants], { name: "migrantsItems" })
  @nestAccessControl.UseRoles({
    resource: "Migrants",
    action: "read",
    possession: "any",
  })
  async findMigrantsItems(
    @graphql.Parent() parent: MigrationFlow,
    @graphql.Args() args: MigrantsFindManyArgs
  ): Promise<Migrants[]> {
    const results = await this.service.findMigrantsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
