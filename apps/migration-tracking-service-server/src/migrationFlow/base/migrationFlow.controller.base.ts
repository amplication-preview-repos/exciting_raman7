/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MigrationFlowService } from "../migrationFlow.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MigrationFlowCreateInput } from "./MigrationFlowCreateInput";
import { MigrationFlow } from "./MigrationFlow";
import { MigrationFlowFindManyArgs } from "./MigrationFlowFindManyArgs";
import { MigrationFlowWhereUniqueInput } from "./MigrationFlowWhereUniqueInput";
import { MigrationFlowUpdateInput } from "./MigrationFlowUpdateInput";
import { MigrantsFindManyArgs } from "../../migrants/base/MigrantsFindManyArgs";
import { Migrants } from "../../migrants/base/Migrants";
import { MigrantsWhereUniqueInput } from "../../migrants/base/MigrantsWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MigrationFlowControllerBase {
  constructor(
    protected readonly service: MigrationFlowService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MigrationFlow })
  @nestAccessControl.UseRoles({
    resource: "MigrationFlow",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createMigrationFlow(
    @common.Body() data: MigrationFlowCreateInput
  ): Promise<MigrationFlow> {
    return await this.service.createMigrationFlow({
      data: data,
      select: {
        createdAt: true,
        date: true,
        destinationCountry: true,
        id: true,
        numberOfMigrants: true,
        originCountry: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [MigrationFlow] })
  @ApiNestedQuery(MigrationFlowFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MigrationFlow",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async migrationFlows(
    @common.Req() request: Request
  ): Promise<MigrationFlow[]> {
    const args = plainToClass(MigrationFlowFindManyArgs, request.query);
    return this.service.migrationFlows({
      ...args,
      select: {
        createdAt: true,
        date: true,
        destinationCountry: true,
        id: true,
        numberOfMigrants: true,
        originCountry: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MigrationFlow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MigrationFlow",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async migrationFlow(
    @common.Param() params: MigrationFlowWhereUniqueInput
  ): Promise<MigrationFlow | null> {
    const result = await this.service.migrationFlow({
      where: params,
      select: {
        createdAt: true,
        date: true,
        destinationCountry: true,
        id: true,
        numberOfMigrants: true,
        originCountry: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MigrationFlow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MigrationFlow",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateMigrationFlow(
    @common.Param() params: MigrationFlowWhereUniqueInput,
    @common.Body() data: MigrationFlowUpdateInput
  ): Promise<MigrationFlow | null> {
    try {
      return await this.service.updateMigrationFlow({
        where: params,
        data: data,
        select: {
          createdAt: true,
          date: true,
          destinationCountry: true,
          id: true,
          numberOfMigrants: true,
          originCountry: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MigrationFlow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MigrationFlow",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMigrationFlow(
    @common.Param() params: MigrationFlowWhereUniqueInput
  ): Promise<MigrationFlow | null> {
    try {
      return await this.service.deleteMigrationFlow({
        where: params,
        select: {
          createdAt: true,
          date: true,
          destinationCountry: true,
          id: true,
          numberOfMigrants: true,
          originCountry: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/migrantsItems")
  @ApiNestedQuery(MigrantsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Migrants",
    action: "read",
    possession: "any",
  })
  async findMigrantsItems(
    @common.Req() request: Request,
    @common.Param() params: MigrationFlowWhereUniqueInput
  ): Promise<Migrants[]> {
    const query = plainToClass(MigrantsFindManyArgs, request.query);
    const results = await this.service.findMigrantsItems(params.id, {
      ...query,
      select: {
        age: true,
        createdAt: true,
        firstName: true,
        gender: true,
        id: true,
        lastName: true,

        migrationFlow: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/migrantsItems")
  @nestAccessControl.UseRoles({
    resource: "MigrationFlow",
    action: "update",
    possession: "any",
  })
  async connectMigrantsItems(
    @common.Param() params: MigrationFlowWhereUniqueInput,
    @common.Body() body: MigrantsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      migrantsItems: {
        connect: body,
      },
    };
    await this.service.updateMigrationFlow({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/migrantsItems")
  @nestAccessControl.UseRoles({
    resource: "MigrationFlow",
    action: "update",
    possession: "any",
  })
  async updateMigrantsItems(
    @common.Param() params: MigrationFlowWhereUniqueInput,
    @common.Body() body: MigrantsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      migrantsItems: {
        set: body,
      },
    };
    await this.service.updateMigrationFlow({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/migrantsItems")
  @nestAccessControl.UseRoles({
    resource: "MigrationFlow",
    action: "update",
    possession: "any",
  })
  async disconnectMigrantsItems(
    @common.Param() params: MigrationFlowWhereUniqueInput,
    @common.Body() body: MigrantsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      migrantsItems: {
        disconnect: body,
      },
    };
    await this.service.updateMigrationFlow({
      where: params,
      data,
      select: { id: true },
    });
  }
}
