/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MigrationFlow as PrismaMigrationFlow,
  Migrants as PrismaMigrants,
} from "@prisma/client";

export class MigrationFlowServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MigrationFlowCountArgs, "select">
  ): Promise<number> {
    return this.prisma.migrationFlow.count(args);
  }

  async migrationFlows(
    args: Prisma.MigrationFlowFindManyArgs
  ): Promise<PrismaMigrationFlow[]> {
    return this.prisma.migrationFlow.findMany(args);
  }
  async migrationFlow(
    args: Prisma.MigrationFlowFindUniqueArgs
  ): Promise<PrismaMigrationFlow | null> {
    return this.prisma.migrationFlow.findUnique(args);
  }
  async createMigrationFlow(
    args: Prisma.MigrationFlowCreateArgs
  ): Promise<PrismaMigrationFlow> {
    return this.prisma.migrationFlow.create(args);
  }
  async updateMigrationFlow(
    args: Prisma.MigrationFlowUpdateArgs
  ): Promise<PrismaMigrationFlow> {
    return this.prisma.migrationFlow.update(args);
  }
  async deleteMigrationFlow(
    args: Prisma.MigrationFlowDeleteArgs
  ): Promise<PrismaMigrationFlow> {
    return this.prisma.migrationFlow.delete(args);
  }

  async findMigrantsItems(
    parentId: string,
    args: Prisma.MigrantsFindManyArgs
  ): Promise<PrismaMigrants[]> {
    return this.prisma.migrationFlow
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .migrantsItems(args);
  }
}
